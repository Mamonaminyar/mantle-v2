package bsscore

import (
	"context"
	"encoding/hex"
	"fmt"
	"log"
	"math/big"
	"testing"

	kms "cloud.google.com/go/kms/apiv1"
	"google.golang.org/api/option"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/ethclient"
)

// cloud hsm public key address:
var (
	addr    = "0x14E4FF2909EEB2bc7379bcfF8263f04671B0afDA"
	nodeurl = "https://rpc.testnet.mantle.xyz"
	apiName = "projects/mantle-381302/locations/global/keyRings/qa/cryptoKeys/sequencer-qa/cryptoKeyVersions/1"
	creden  = "7b0a20202274797065223a2022736572766963655f6163636f756e74222c0a20202270726f6a6563745f6964223a20226d616e746c652d333831333032222c0a202022707269766174655f6b65795f6964223a202239633661386163613562353730663236643932613332633431626663363162633865363632373833222c0a202022707269766174655f6b6579223a20222d2d2d2d2d424547494e2050524956415445204b45592d2d2d2d2d5c6e4d494945766749424144414e42676b71686b6947397730424151454641415343424b67776767536b41674541416f49424151445a6644614c6275327835774f445c6e484a546e2f7176462f774e786e477875307045537577785854716d4f3748626f73663047484b43394c39566b6c2b626a544455354e546359676569636d63384e5c6e496276343854523945644a544133794c456d4a7a6d66674973512f714f54557263454d516c2b552f646b4a41796d416c782b435734424a61334b397a31444a425c6e3456374b39574c61507a376a6e6f625669686656795751506a32345035395452366b31506b53776752445147704f79513632457439376a5347555478494f316f5c6e394e76517a75562f4535437a4346682f372b6251464a3232487939346274344f424b6d6c776947755769614a4575674b4d6c6931454e74736c5869447466726f5c6e6d637861455373395044705068485866346e5644477265484f4d4c4b4346686641423030775a685461575a4a6f474a39566c514e4574315136346b32547a4d375c6e5a4a754d7861636e41674d4241414543676745414c62574c69546168516e69354a6a39466c4a545436574d3169425647504f79496a52552b2f4d4b4e704870535c6e61346d74456a484748723045376f563267324d713949455975552f6b59625635374e71674e53774d7968534b7a654f33733073443469514547312b4c5a7344725c6e5364766f584835774d697861744639555964786d655939536a454a42706568395035647359742b384450367036784551616155436157355156327a66787675685c6e5030543071686b38563273534c64784a454144325a32614431494748746b417943384c696f31386c457463555a636233347470387a556f6f794d6a4d475667725c6e493037714a52494a635a4e53315a4d48416979476e2f75463745324d6f52517457325373476a484f7171636f78717074776657453831627964344b635069476c5c6e31646c5573676e61344d66653831344f3778573977467a585736307a4f72364d2b4b6275327a7a6a30514b4267514437555952646a3653594256716a662f504a5c6e4b613372635a7139494262434e526b4c6234692b7a506b784e6251502f793733765a4a3443587a455368543637334242427a6b35744e386164533152554c436d5c6e4f7163516a4b79327949657366352b45744d62632b4331734c6c48705873737a5733794f5056536a6850557444587050504f42577a3537775a3146556e3644775c6e357074534e5171414377424b6c424c643534504f654c706849774b42675144646956704e6c6f336266396747372b7077683173543939494d374965556e6a69535c6e5a425a5161786e6e312f3948716d48584f6d4a2b6b2b6b61303468313138474947395576745876426d37315a466f5875545234307453676d62615548787170625c6e354a787039544f76715353636c6d6c6f576230572f72614c534a774f774d7465686f6f76307a6f686e422f4f50386533306c644d4f4e7032647a7776383767375c6e4c48706e485235634c514b42675144446a61755562626769506c42483173456f4c314651576561513851346b63644b61446d42324c754a63417a436f486555375c6e436e7956414c546675394656624d694a49516a4c4f553038746837634868424757473830746e4753444c6c645a5455487575376564424a4d456b4c5564316c675c6e44666a2b6151535a39465165695655356f4f486a53737965765a59515a65474363623438476c2b67514738716d4d7552645a73664a74764878774b42674857735c6e4c70354632535839653062384375416f315a542b72734555706c4f6e303037584151394952474e6b31514642484756526174336e505174317a756368616e67635c6e714a6d463461324f527635614f31752f394d7030613159324b56472f45654272787a56302f445a544e744a434273315a31566d7768452f7069704d2f6a7761765c6e6d686b624c71614a6f6b395169346f316e513873703859445161494b364248755a7a6e384f704d6c416f4742414c6a355932496a552f534e416c694e456748665c6e58533551726434583672635139777a52373861457251424d636e364e5659432f424a534a4d6f344832666b5a385736617454544b75616d4a4e657276754a70645c6e77686d4a475a4e4e67634372334559634d366565476c455045616d6f36374d464b6d4b6945484257714d7037522f6f395061597a624b667774554c64546d71345c6e4749336250676d4954346a72442f3932452f414c427544475c6e2d2d2d2d2d454e442050524956415445204b45592d2d2d2d2d5c6e222c0a202022636c69656e745f656d61696c223a2022636c6f756468736d2d7161406d616e746c652d3338313330322e69616d2e67736572766963656163636f756e742e636f6d222c0a202022636c69656e745f6964223a2022313035393734343937353938323137383437323831222c0a202022617574685f757269223a202268747470733a2f2f6163636f756e74732e676f6f676c652e636f6d2f6f2f6f61757468322f61757468222c0a202022746f6b656e5f757269223a202268747470733a2f2f6f61757468322e676f6f676c65617069732e636f6d2f746f6b656e222c0a202022617574685f70726f76696465725f783530395f636572745f75726c223a202268747470733a2f2f7777772e676f6f676c65617069732e636f6d2f6f61757468322f76312f6365727473222c0a202022636c69656e745f783530395f636572745f75726c223a202268747470733a2f2f7777772e676f6f676c65617069732e636f6d2f726f626f742f76312f6d657461646174612f783530392f636c6f756468736d2d71612534306d616e746c652d3338313330322e69616d2e67736572766963656163636f756e742e636f6d222c0a202022756e6976657273655f646f6d61696e223a2022676f6f676c65617069732e636f6d220a7d0a"
)

// This test will fail because we lack the mantle-666-keystore.json
func TestManagedKey_NewEthereumTransactor(t *testing.T) {
	fmt.Println("this is a simple gcp-cloudhsm demo")
	ethClient, err := ethclient.Dial(nodeurl)
	if err != nil {
		log.Fatal(err)
	}

	tx, chainID := constructTx(addr, ethClient)

	testSigner := types.NewEIP155Signer(chainID) // Mumbai
	ctx := context.Background()
	proBytes, err := hex.DecodeString(creden)
	apikey := option.WithCredentialsJSON(proBytes)
	client, err := kms.NewKeyManagementClient(ctx, apikey)

	mk := &ManagedKey{
		KeyName:      apiName,
		EthereumAddr: common.HexToAddress(addr),
		Gclient:      client,
	}

	signedTx, err := mk.NewEthereumTransactor(context.Background(), testSigner).Signer(mk.EthereumAddr, tx)
	if err != nil {
		log.Fatal(err.Error())
	}
	fmt.Println("hash")
	fmt.Println("hash:" + signedTx.Hash().String())

	v, r, s := signedTx.RawSignatureValues()
	fmt.Printf("signatures, r:%s, s:%s, v:%d\n", r.String(), s.String(), v.Int64())

	err = ethClient.SendTransaction(context.Background(), signedTx)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("tx sent: %s", signedTx.Hash().Hex())
}

func constructTx(addr string, client *ethclient.Client) (*types.Transaction, *big.Int) {
	nonce, err := client.PendingNonceAt(context.Background(), common.HexToAddress(addr))
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(nonce)

	value := big.NewInt(1000000000000000000) // in wei (1 eth)
	gasLimit := uint64(21000)                // in units
	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		log.Fatal(err)
	}

	toAddress := common.HexToAddress("0x4592d8f8d7b001e72cb26a73e4fa1806a51ac79d")
	var data []byte
	tx := types.NewTransaction(nonce, toAddress, value, gasLimit, gasPrice, data)

	chainID, err := client.NetworkID(context.Background())
	if err != nil {
		log.Fatal(err)
	}
	return tx, chainID
}
